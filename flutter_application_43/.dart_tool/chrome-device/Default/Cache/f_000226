define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/painting/edge_insets.dart'], (function load__packages__flutter_login__src__providers__login_theme_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__painting__edge_insets$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const card_theme = packages__flutter__src__material__icon_button$46dart.src__material__card_theme;
  const input_decorator = packages__flutter__src__material__icon_button$46dart.src__material__input_decorator;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  var login_theme = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: card_theme.CardTheme.prototype,
        [CardTheme_shape]: null,
        [CardTheme_margin]: null,
        [CardTheme_elevation]: null,
        [CardTheme_shadowColor]: null,
        [CardTheme_color]: null,
        [CardTheme_clipBehavior]: null
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: input_decorator.FloatingLabelBehavior.prototype,
        [_name]: "FloatingLabelBehavior.auto",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: input_decorator.InputDecorationTheme.prototype,
        [InputDecorationTheme_alignLabelWithHint]: false,
        [InputDecorationTheme_border]: null,
        [InputDecorationTheme_enabledBorder]: null,
        [InputDecorationTheme_disabledBorder]: null,
        [InputDecorationTheme_focusedErrorBorder]: null,
        [InputDecorationTheme_focusedBorder]: null,
        [InputDecorationTheme_errorBorder]: null,
        [InputDecorationTheme_hoverColor]: null,
        [InputDecorationTheme_focusColor]: null,
        [InputDecorationTheme_fillColor]: null,
        [InputDecorationTheme_filled]: true,
        [InputDecorationTheme_counterStyle]: null,
        [InputDecorationTheme_suffixStyle]: null,
        [InputDecorationTheme_prefixStyle]: null,
        [InputDecorationTheme_isCollapsed]: false,
        [InputDecorationTheme_contentPadding]: null,
        [InputDecorationTheme_isDense]: false,
        [InputDecorationTheme_floatingLabelBehavior]: C[2] || CT.C2,
        [InputDecorationTheme_hasFloatingPlaceholder]: true,
        [InputDecorationTheme_errorMaxLines]: null,
        [InputDecorationTheme_errorStyle]: null,
        [InputDecorationTheme_hintStyle]: null,
        [InputDecorationTheme_helperMaxLines]: null,
        [InputDecorationTheme_helperStyle]: null,
        [InputDecorationTheme_labelStyle]: null
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: login_theme.LoginButtonTheme.prototype,
        [shape$]: null,
        [highlightElevation$]: null,
        [elevation$]: null,
        [splashColor$]: null,
        [highlightColor$]: null,
        [backgroundColor$]: null
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:flutter_login/src/providers/login_theme.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_login-2.2.1/lib/src/providers/login_theme.dart"
  ];
  var backgroundColor$ = dart.privateName(login_theme, "LoginButtonTheme.backgroundColor");
  var highlightColor$ = dart.privateName(login_theme, "LoginButtonTheme.highlightColor");
  var splashColor$ = dart.privateName(login_theme, "LoginButtonTheme.splashColor");
  var elevation$ = dart.privateName(login_theme, "LoginButtonTheme.elevation");
  var highlightElevation$ = dart.privateName(login_theme, "LoginButtonTheme.highlightElevation");
  var shape$ = dart.privateName(login_theme, "LoginButtonTheme.shape");
  login_theme.LoginButtonTheme = class LoginButtonTheme extends core.Object {
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get highlightColor() {
      return this[highlightColor$];
    }
    set highlightColor(value) {
      super.highlightColor = value;
    }
    get splashColor() {
      return this[splashColor$];
    }
    set splashColor(value) {
      super.splashColor = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get highlightElevation() {
      return this[highlightElevation$];
    }
    set highlightElevation(value) {
      super.highlightElevation = value;
    }
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
  };
  (login_theme.LoginButtonTheme.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
    let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let highlightElevation = opts && 'highlightElevation' in opts ? opts.highlightElevation : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    this[backgroundColor$] = backgroundColor;
    this[highlightColor$] = highlightColor;
    this[splashColor$] = splashColor;
    this[elevation$] = elevation;
    this[highlightElevation$] = highlightElevation;
    this[shape$] = shape;
    ;
  }).prototype = login_theme.LoginButtonTheme.prototype;
  dart.addTypeTests(login_theme.LoginButtonTheme);
  dart.addTypeCaches(login_theme.LoginButtonTheme);
  dart.setLibraryUri(login_theme.LoginButtonTheme, I[0]);
  dart.setFieldSignature(login_theme.LoginButtonTheme, () => ({
    __proto__: dart.getFields(login_theme.LoginButtonTheme.__proto__),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    highlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    splashColor: dart.finalFieldType(dart.nullable(ui.Color)),
    elevation: dart.finalFieldType(dart.nullable(core.double)),
    highlightElevation: dart.finalFieldType(dart.nullable(core.double)),
    shape: dart.finalFieldType(dart.nullable(borders.ShapeBorder))
  }));
  var pageColorLight$ = dart.privateName(login_theme, "LoginTheme.pageColorLight");
  var pageColorDark$ = dart.privateName(login_theme, "LoginTheme.pageColorDark");
  var primaryColor$ = dart.privateName(login_theme, "LoginTheme.primaryColor");
  var accentColor$ = dart.privateName(login_theme, "LoginTheme.accentColor");
  var errorColor$ = dart.privateName(login_theme, "LoginTheme.errorColor");
  var cardTheme$ = dart.privateName(login_theme, "LoginTheme.cardTheme");
  var inputTheme$ = dart.privateName(login_theme, "LoginTheme.inputTheme");
  var buttonTheme$ = dart.privateName(login_theme, "LoginTheme.buttonTheme");
  var titleStyle$ = dart.privateName(login_theme, "LoginTheme.titleStyle");
  var bodyStyle$ = dart.privateName(login_theme, "LoginTheme.bodyStyle");
  var textFieldStyle$ = dart.privateName(login_theme, "LoginTheme.textFieldStyle");
  var buttonStyle$ = dart.privateName(login_theme, "LoginTheme.buttonStyle");
  var beforeHeroFontSize$ = dart.privateName(login_theme, "LoginTheme.beforeHeroFontSize");
  var afterHeroFontSize$ = dart.privateName(login_theme, "LoginTheme.afterHeroFontSize");
  var footerBackgroundColor$ = dart.privateName(login_theme, "LoginTheme.footerBackgroundColor");
  var switchAuthTextColor$ = dart.privateName(login_theme, "LoginTheme.switchAuthTextColor");
  var footerTextStyle$ = dart.privateName(login_theme, "LoginTheme.footerTextStyle");
  var authButtonPadding$ = dart.privateName(login_theme, "LoginTheme.authButtonPadding");
  var providerButtonPadding$ = dart.privateName(login_theme, "LoginTheme.providerButtonPadding");
  var footerBottomPadding$ = dart.privateName(login_theme, "LoginTheme.footerBottomPadding");
  var logoWidth$ = dart.privateName(login_theme, "LoginTheme.logoWidth");
  var CardTheme_shape = dart.privateName(card_theme, "CardTheme.shape");
  var CardTheme_margin = dart.privateName(card_theme, "CardTheme.margin");
  var CardTheme_elevation = dart.privateName(card_theme, "CardTheme.elevation");
  var CardTheme_shadowColor = dart.privateName(card_theme, "CardTheme.shadowColor");
  var CardTheme_color = dart.privateName(card_theme, "CardTheme.color");
  var CardTheme_clipBehavior = dart.privateName(card_theme, "CardTheme.clipBehavior");
  var InputDecorationTheme_alignLabelWithHint = dart.privateName(input_decorator, "InputDecorationTheme.alignLabelWithHint");
  var InputDecorationTheme_border = dart.privateName(input_decorator, "InputDecorationTheme.border");
  var InputDecorationTheme_enabledBorder = dart.privateName(input_decorator, "InputDecorationTheme.enabledBorder");
  var InputDecorationTheme_disabledBorder = dart.privateName(input_decorator, "InputDecorationTheme.disabledBorder");
  var InputDecorationTheme_focusedErrorBorder = dart.privateName(input_decorator, "InputDecorationTheme.focusedErrorBorder");
  var InputDecorationTheme_focusedBorder = dart.privateName(input_decorator, "InputDecorationTheme.focusedBorder");
  var InputDecorationTheme_errorBorder = dart.privateName(input_decorator, "InputDecorationTheme.errorBorder");
  var InputDecorationTheme_hoverColor = dart.privateName(input_decorator, "InputDecorationTheme.hoverColor");
  var InputDecorationTheme_focusColor = dart.privateName(input_decorator, "InputDecorationTheme.focusColor");
  var InputDecorationTheme_fillColor = dart.privateName(input_decorator, "InputDecorationTheme.fillColor");
  var InputDecorationTheme_filled = dart.privateName(input_decorator, "InputDecorationTheme.filled");
  var InputDecorationTheme_counterStyle = dart.privateName(input_decorator, "InputDecorationTheme.counterStyle");
  var InputDecorationTheme_suffixStyle = dart.privateName(input_decorator, "InputDecorationTheme.suffixStyle");
  var InputDecorationTheme_prefixStyle = dart.privateName(input_decorator, "InputDecorationTheme.prefixStyle");
  var InputDecorationTheme_isCollapsed = dart.privateName(input_decorator, "InputDecorationTheme.isCollapsed");
  var InputDecorationTheme_contentPadding = dart.privateName(input_decorator, "InputDecorationTheme.contentPadding");
  var InputDecorationTheme_isDense = dart.privateName(input_decorator, "InputDecorationTheme.isDense");
  var _name = dart.privateName(input_decorator, "_name");
  var InputDecorationTheme_floatingLabelBehavior = dart.privateName(input_decorator, "InputDecorationTheme.floatingLabelBehavior");
  var InputDecorationTheme_hasFloatingPlaceholder = dart.privateName(input_decorator, "InputDecorationTheme.hasFloatingPlaceholder");
  var InputDecorationTheme_errorMaxLines = dart.privateName(input_decorator, "InputDecorationTheme.errorMaxLines");
  var InputDecorationTheme_errorStyle = dart.privateName(input_decorator, "InputDecorationTheme.errorStyle");
  var InputDecorationTheme_hintStyle = dart.privateName(input_decorator, "InputDecorationTheme.hintStyle");
  var InputDecorationTheme_helperMaxLines = dart.privateName(input_decorator, "InputDecorationTheme.helperMaxLines");
  var InputDecorationTheme_helperStyle = dart.privateName(input_decorator, "InputDecorationTheme.helperStyle");
  var InputDecorationTheme_labelStyle = dart.privateName(input_decorator, "InputDecorationTheme.labelStyle");
  const Object_ChangeNotifier$36 = class Object_ChangeNotifier extends core.Object {};
  (Object_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
  }).prototype = Object_ChangeNotifier$36.prototype;
  dart.applyMixin(Object_ChangeNotifier$36, change_notifier.ChangeNotifier);
  login_theme.LoginTheme = class LoginTheme extends Object_ChangeNotifier$36 {
    get pageColorLight() {
      return this[pageColorLight$];
    }
    set pageColorLight(value) {
      super.pageColorLight = value;
    }
    get pageColorDark() {
      return this[pageColorDark$];
    }
    set pageColorDark(value) {
      super.pageColorDark = value;
    }
    get primaryColor() {
      return this[primaryColor$];
    }
    set primaryColor(value) {
      super.primaryColor = value;
    }
    get accentColor() {
      return this[accentColor$];
    }
    set accentColor(value) {
      super.accentColor = value;
    }
    get errorColor() {
      return this[errorColor$];
    }
    set errorColor(value) {
      super.errorColor = value;
    }
    get cardTheme() {
      return this[cardTheme$];
    }
    set cardTheme(value) {
      super.cardTheme = value;
    }
    get inputTheme() {
      return this[inputTheme$];
    }
    set inputTheme(value) {
      super.inputTheme = value;
    }
    get buttonTheme() {
      return this[buttonTheme$];
    }
    set buttonTheme(value) {
      super.buttonTheme = value;
    }
    get titleStyle() {
      return this[titleStyle$];
    }
    set titleStyle(value) {
      super.titleStyle = value;
    }
    get bodyStyle() {
      return this[bodyStyle$];
    }
    set bodyStyle(value) {
      super.bodyStyle = value;
    }
    get textFieldStyle() {
      return this[textFieldStyle$];
    }
    set textFieldStyle(value) {
      super.textFieldStyle = value;
    }
    get buttonStyle() {
      return this[buttonStyle$];
    }
    set buttonStyle(value) {
      super.buttonStyle = value;
    }
    get beforeHeroFontSize() {
      return this[beforeHeroFontSize$];
    }
    set beforeHeroFontSize(value) {
      super.beforeHeroFontSize = value;
    }
    get afterHeroFontSize() {
      return this[afterHeroFontSize$];
    }
    set afterHeroFontSize(value) {
      super.afterHeroFontSize = value;
    }
    get footerBackgroundColor() {
      return this[footerBackgroundColor$];
    }
    set footerBackgroundColor(value) {
      super.footerBackgroundColor = value;
    }
    get switchAuthTextColor() {
      return this[switchAuthTextColor$];
    }
    set switchAuthTextColor(value) {
      super.switchAuthTextColor = value;
    }
    get footerTextStyle() {
      return this[footerTextStyle$];
    }
    set footerTextStyle(value) {
      super.footerTextStyle = value;
    }
    get authButtonPadding() {
      return this[authButtonPadding$];
    }
    set authButtonPadding(value) {
      super.authButtonPadding = value;
    }
    get providerButtonPadding() {
      return this[providerButtonPadding$];
    }
    set providerButtonPadding(value) {
      super.providerButtonPadding = value;
    }
    get footerBottomPadding() {
      return this[footerBottomPadding$];
    }
    set footerBottomPadding(value) {
      super.footerBottomPadding = value;
    }
    get logoWidth() {
      return this[logoWidth$];
    }
    set logoWidth(value) {
      super.logoWidth = value;
    }
  };
  (login_theme.LoginTheme.new = function(opts) {
    let pageColorLight = opts && 'pageColorLight' in opts ? opts.pageColorLight : null;
    let pageColorDark = opts && 'pageColorDark' in opts ? opts.pageColorDark : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    let accentColor = opts && 'accentColor' in opts ? opts.accentColor : null;
    let errorColor = opts && 'errorColor' in opts ? opts.errorColor : null;
    let cardTheme = opts && 'cardTheme' in opts ? opts.cardTheme : C[0] || CT.C0;
    if (cardTheme == null) dart.nullFailed(I[1], 44, 10, "cardTheme");
    let inputTheme = opts && 'inputTheme' in opts ? opts.inputTheme : C[1] || CT.C1;
    if (inputTheme == null) dart.nullFailed(I[1], 45, 10, "inputTheme");
    let buttonTheme = opts && 'buttonTheme' in opts ? opts.buttonTheme : C[3] || CT.C3;
    if (buttonTheme == null) dart.nullFailed(I[1], 48, 10, "buttonTheme");
    let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : null;
    let bodyStyle = opts && 'bodyStyle' in opts ? opts.bodyStyle : null;
    let textFieldStyle = opts && 'textFieldStyle' in opts ? opts.textFieldStyle : null;
    let buttonStyle = opts && 'buttonStyle' in opts ? opts.buttonStyle : null;
    let beforeHeroFontSize = opts && 'beforeHeroFontSize' in opts ? opts.beforeHeroFontSize : 48;
    if (beforeHeroFontSize == null) dart.nullFailed(I[1], 53, 10, "beforeHeroFontSize");
    let afterHeroFontSize = opts && 'afterHeroFontSize' in opts ? opts.afterHeroFontSize : 15;
    if (afterHeroFontSize == null) dart.nullFailed(I[1], 54, 10, "afterHeroFontSize");
    let footerBackgroundColor = opts && 'footerBackgroundColor' in opts ? opts.footerBackgroundColor : null;
    let switchAuthTextColor = opts && 'switchAuthTextColor' in opts ? opts.switchAuthTextColor : null;
    let footerTextStyle = opts && 'footerTextStyle' in opts ? opts.footerTextStyle : null;
    let authButtonPadding = opts && 'authButtonPadding' in opts ? opts.authButtonPadding : null;
    let providerButtonPadding = opts && 'providerButtonPadding' in opts ? opts.providerButtonPadding : null;
    let footerBottomPadding = opts && 'footerBottomPadding' in opts ? opts.footerBottomPadding : 0;
    if (footerBottomPadding == null) dart.nullFailed(I[1], 60, 10, "footerBottomPadding");
    let logoWidth = opts && 'logoWidth' in opts ? opts.logoWidth : null;
    this[pageColorLight$] = pageColorLight;
    this[pageColorDark$] = pageColorDark;
    this[primaryColor$] = primaryColor;
    this[accentColor$] = accentColor;
    this[errorColor$] = errorColor;
    this[cardTheme$] = cardTheme;
    this[inputTheme$] = inputTheme;
    this[buttonTheme$] = buttonTheme;
    this[titleStyle$] = titleStyle;
    this[bodyStyle$] = bodyStyle;
    this[textFieldStyle$] = textFieldStyle;
    this[buttonStyle$] = buttonStyle;
    this[beforeHeroFontSize$] = beforeHeroFontSize;
    this[afterHeroFontSize$] = afterHeroFontSize;
    this[footerBackgroundColor$] = footerBackgroundColor;
    this[switchAuthTextColor$] = switchAuthTextColor;
    this[footerTextStyle$] = footerTextStyle;
    this[authButtonPadding$] = authButtonPadding;
    this[providerButtonPadding$] = providerButtonPadding;
    this[footerBottomPadding$] = footerBottomPadding;
    this[logoWidth$] = logoWidth;
    login_theme.LoginTheme.__proto__.new.call(this);
    ;
  }).prototype = login_theme.LoginTheme.prototype;
  dart.addTypeTests(login_theme.LoginTheme);
  dart.addTypeCaches(login_theme.LoginTheme);
  dart.setLibraryUri(login_theme.LoginTheme, I[0]);
  dart.setFieldSignature(login_theme.LoginTheme, () => ({
    __proto__: dart.getFields(login_theme.LoginTheme.__proto__),
    pageColorLight: dart.finalFieldType(dart.nullable(ui.Color)),
    pageColorDark: dart.finalFieldType(dart.nullable(ui.Color)),
    primaryColor: dart.finalFieldType(dart.nullable(ui.Color)),
    accentColor: dart.finalFieldType(dart.nullable(ui.Color)),
    errorColor: dart.finalFieldType(dart.nullable(ui.Color)),
    cardTheme: dart.finalFieldType(card_theme.CardTheme),
    inputTheme: dart.finalFieldType(input_decorator.InputDecorationTheme),
    buttonTheme: dart.finalFieldType(login_theme.LoginButtonTheme),
    titleStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    bodyStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textFieldStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    buttonStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    beforeHeroFontSize: dart.finalFieldType(core.double),
    afterHeroFontSize: dart.finalFieldType(core.double),
    footerBackgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    switchAuthTextColor: dart.finalFieldType(dart.nullable(ui.Color)),
    footerTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    authButtonPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsets)),
    providerButtonPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsets)),
    footerBottomPadding: dart.finalFieldType(core.double),
    logoWidth: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.trackLibraries("packages/flutter_login/src/providers/login_theme.dart", {
    "package:flutter_login/src/providers/login_theme.dart": login_theme
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["login_theme.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAce;;;;;;IAKA;;;;;;IAGA;;;;;;IAIC;;;;;;IAIA;;;;;;IAGK;;;;;;;;QA7BZ;QACA;QACA;QACA;QACA;QACA;IALA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuDW;;;;;;IAIA;;;;;;IAIA;;;;;;IAIA;;;;;;IAGA;;;;;;IAGG;;;;;;IAGW;;;;;;IAIJ;;;;;;IAGN;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAIJ;;;;;;IAIA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGI;;;;;;IAGC;;;;;;IAGA;;;;;;IAGL;;;;;;IAKC;;;;;;;;QA/FP;QACA;QACA;QACA;QACA;QACA;;QACA;;QAGA;;QACA;QACA;QACA;QACA;QACA;;QACA;;QACA;QACA;QACA;QACA;QACA;QACA;;QACA;IAtBA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAvBP;;EAwBE","file":"../../../../../../../../../E:/packages/flutter_login/src/providers/login_theme.dart.lib.js"}');
  // Exports:
  return {
    src__providers__login_theme: login_theme
  };
}));

//# sourceMappingURL=login_theme.dart.lib.js.map
